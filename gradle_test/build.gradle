apply plugin: 'android'

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.3"

    defaultConfig {
        packageName "com.alex.gradletestapp.test2"
        minSdkVersion 8
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }

    sourceSets {
        main {
            res.srcDirs = ['res']
        }

        signingConfigs {
            debug {
                storeFile file("android.debug")
            }

            test {
                storeFile file("android.debug")
                storePassword "android"
                keyAlias "androiddebugkey"
                keyPassword "android"
            }
        }
    }

    buildTypes {
        debug {
            packageNameSuffix ".debug"
        }

        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.test
            packageNameSuffix ".release"
        }
    }

    productFlavors {
        flavor1{
            packageName "com.alex.gradletestapp.flavor1"
            versionCode 5
        }

        flavor2 {
            packageName "com.alex.gradletestapp.flavor2"
            versionCode 10
        }
    }

}

dependencies {
    compile 'com.android.support:support-v4:19.0.1'
    compile 'com.android.support:appcompat-v7:19.0.1'
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

android.applicationVariants.all { variant ->
    def flavor = variant.productFlavors.get(0)
    def buildType = variant.buildType
    variant.processManifest.doLast {
        println '################# Adding Package Names to Manifest #######################'
        replaceInManifest(variant,
                'PACKAGE_NAME',
                [flavor.packageName, buildType.packageNameSuffix].findAll().join()) // ignores null
    }
    variant.mergeResources.doFirst {
        replaceValues(variant)
    }
    variant.mergeResources.doLast {
        replaceString(variant)
        replaceIcon(variant)
    }
    variant.processResources.doFirst{
        replaceIcon(variant)
    }
}

def replaceInManifest(variant, fromString, toString) {
    def flavor = variant.productFlavors.get(0)
    def buildtype = variant.buildType
    def manifestFile = "$buildDir/manifests/${flavor.name}/${buildtype.name}/AndroidManifest.xml"
    def updatedContent = new File(manifestFile).getText('UTF-8').replaceAll(fromString, toString)
    new File(manifestFile).write(updatedContent, 'UTF-8')
}

def replaceString(variant) {
    def flavor = variant.productFlavors.get(0)
    def buildtype = variant.buildType
    def valuesFile = "$buildDir/res/all/${flavor.name}/${buildtype.name}/values/values.xml"
    def changedString = new File(valuesFile).getText('UTF-8').replaceAll("<string name=\"test_string\">TEST REPLACEMENT STRING 12348009</string>",
            "<string name=\"test_string\">"+ flavor.name + "</string>")
    new File(valuesFile).write(changedString, 'UTF-8')
}

def replaceIcon(variant) {
    def flavor = variant.productFlavors.get(0)
    def buildtype = variant.buildType
    copy {
        from ('swap_resources') {
            include "app_icon.png"
        }
        into("$buildDir/res/all/${flavor.name}/${buildtype.name}/drawable")
        rename {String fileName -> fileName.replace('app_icon', 'bubble')}
    }
}

def replaceValues(variant) {
    def flavor = variant.productFlavors.get(0)
    def buildtype = variant.buildType
    copy {
        from ("swap_resources/${flavor.name}") {
            include "config.xml"
        }
        into("res/values")
    }
}

task stringExchange(type:Copy) {
    from("res/") {
            include '**'
    }
}
